name: Release Build for All Platforms

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        default: 'X.X'
        

jobs:     

# UBUNTU BUILD
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run cx_freeze 
        continue-on-error: true
        run: |
          python setup.py bdist_rpm

      - name: Run alien
        continue-on-error: true
        run: |
          cd dist
          sudo apt install alien
          sudo alien -d TimerX-${{ github.event.inputs.version }}.tar.gz --version=${{ github.event.inputs.version }}
          sudo alien -r TimerX-${{ github.event.inputs.version }}.tar.gz --version=${{ github.event.inputs.version }}
      - uses: actions/upload-artifact@v2
        with:
          name: TimerX.deb
          path: dist/timerx_${{ github.event.inputs.version }}-2_all.deb
      - uses: actions/upload-artifact@v2
        with:
          name: TimerX.rpm
          path: dist/TimerX-${{ github.event.inputs.version }}-2.noarch.rpm
      - uses: actions/upload-artifact@v2
        with:
          name: TimerX.tar.gz
          path: dist/TimerX-${{ github.event.inputs.version }}.tar.gz

# WINDOWS BUILD
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install -r requirements-windows.txt
          pip install -r requirements-dev.txt
      - name: Run cx_freeze
        run: |
          python setup.py bdist_msi
      - uses: actions/upload-artifact@v2
        with:
          name: TimerX-setup.msi
          path: dist/TimerX-win64.msi

# MACOS BUILD
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Run cx_freeze
        run: |
          python setup.py bdist_dmg

      - uses: actions/upload-artifact@v2
        with:
          name: TimerX-setup.dmg
          path: build/TimerX.dmg

      - uses: actions/download-artifact@v2
        name: Upload MSI
        with:
          name: TimerX-setup.msi

      - uses: actions/download-artifact@v2
        name: Upload RPM
        with:
          name: TimerX.rpm

      - uses: actions/download-artifact@v2
        name: Upload DEB
        with:
          name: TimerX.deb

      - uses: actions/download-artifact@v2
        name: Upload Tarball
        with:
          name: TimerX.tar.gz

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: 'Release ${{ github.event.inputs.version }}'
          overwrite: true
          body: |
            Release ${{ github.event.inputs.version }} (Add your content here and then publish this.)
          draft: true
          prerelease: false 

      - name: Upload Release Asset(MSI)
        id: upload-release-asset-msi
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: TimerX-win64.msi
          asset_name: TimerX-setup.msi
          asset_content_type: application/zip

      - name: Upload Release Asset(DEB)
        id: upload-release-asset-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: timerx_${{ github.event.inputs.version }}-2_all.deb
          asset_name: TimerX.deb
          asset_content_type: application/zip

      - name: Upload Release Asset(Tarball)
        id: upload-release-asset-tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: TimerX-${{ github.event.inputs.version }}.tar.gz
          asset_name: TimerX.tar.gz
          asset_content_type: application/zip
      
      - name: Upload Release Asset(RPM)
        id: upload-release-asset-rpm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: TimerX-${{ github.event.inputs.version }}-2.noarch.rpm
          asset_name: TimerX.rpm
          asset_content_type: application/zip

      - name: Upload Release Asset(DMG)
        id: upload-release-asset-dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: build/TimerX.dmg
          asset_name: TimerX-setup.dmg
          asset_content_type: application/zip
